{"code":"import { defineComponent, inject, ref, watch } from 'vue';\r\nimport { parseExpression, getVariables } from './operations';\r\nimport { useCollection } from '@directus/extensions-sdk';\r\nexport default defineComponent({\r\n    props: {\r\n        value: {\r\n            type: [String, Number],\r\n            default: null,\r\n        },\r\n        field: {\r\n            type: String,\r\n            default: null,\r\n        },\r\n        type: {\r\n            type: String,\r\n            default: null,\r\n        },\r\n        collection: {\r\n            type: String,\r\n            default: '',\r\n        },\r\n        primaryKey: {\r\n            type: [String, Number],\r\n            default: '',\r\n        },\r\n        template: {\r\n            type: String,\r\n            default: '',\r\n        },\r\n        mode: {\r\n            type: String,\r\n            default: null,\r\n        },\r\n        prefix: {\r\n            type: String,\r\n            default: null,\r\n        },\r\n        suffix: {\r\n            type: String,\r\n            default: null,\r\n        },\r\n        customCss: {\r\n            type: Object,\r\n            default: null,\r\n        },\r\n    },\r\n    emits: ['input'],\r\n    setup(props, { emit }) {\r\n        const defaultValues = useCollection(props.collection).defaults;\r\n        const computedValue = ref(props.value);\r\n        const FieldValues = inject('values', ref({}));\r\n        const errorMsg = ref(null);\r\n        if (FieldValues) {\r\n            watch(FieldValues, () => {\r\n                const newValue = compute();\r\n                computedValue.value = newValue;\r\n                if (props.mode === 'displayonly') {\r\n                    return;\r\n                }\r\n                if (newValue !== props.value) {\r\n                    setTimeout(() => {\r\n                        emit('input', newValue);\r\n                    }, 1);\r\n                }\r\n            });\r\n        }\r\n        return {\r\n            computedValue,\r\n            errorMsg,\r\n        };\r\n        function compute() {\r\n            var _a;\r\n            try {\r\n                if (getVariables(props.template).some((item) => !FieldValues.value[item])) {\r\n                    return;\r\n                }\r\n                const res = props.template.replace(/{{.*?}}/g, (match) => {\r\n                    const expression = match.slice(2, -2).trim();\r\n                    return parseExpression(expression, FieldValues.value, defaultValues.value);\r\n                });\r\n                errorMsg.value = null;\r\n                if (['integer', 'decimal', 'bigInteger'].includes(props.type)) {\r\n                    return parseInt(res) || 0;\r\n                }\r\n                if (['float'].includes(props.type)) {\r\n                    return parseFloat(res) || 0;\r\n                }\r\n                return res;\r\n            }\r\n            catch (err) {\r\n                errorMsg.value = (_a = err.message) !== null && _a !== void 0 ? _a : 'Unknown error';\r\n                return null;\r\n            }\r\n        }\r\n    },\r\n});\r\n","references":["/Users/mac/Documents/ksher/directus-extension-computed-interface/node_modules/vue/dist/vue.d.ts","/Users/mac/Documents/ksher/directus-extension-computed-interface/src/operations.ts","/Users/mac/Documents/ksher/directus-extension-computed-interface/node_modules/@directus/extensions-sdk/dist/esm/index.d.ts"]}
